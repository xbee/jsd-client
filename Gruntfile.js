// Generated by CoffeeScript 1.8.0
(function() {
  var banner, path, renameCoffe2js, renameJs2min;

  path = require("path");

  renameCoffe2js = function(dest, matchedSrcPath, opts) {
    return path.join(dest, path.basename(matchedSrcPath, '.coffee') + '.js');
  };

  renameJs2min = function(dest, matchedSrcPath, opts) {
    return path.join(dest, path.basename(matchedSrcPath, '.js') + '.min.js');
  };

  banner = "/*!\n<%= pkg.name %> - v<%= pkg.version %> - <%= grunt.template.today(\"yyyy-mm-dd\") %>\nThis program is distributed under the terms of the <%= pkg.license %> license.\nCopyright (c) 2011-<%= grunt.template.today(\"yyyy\") %> <%= pkg.author %>\n*/\n";

  module.exports = function(grunt) {
    grunt.initConfig({
      pkg: grunt.file.readJSON("package.json"),
      coffeescript_concat: {
        compile: {
          options: {
            includeFolders: ['coffee-src', 'plugins']
          },
          files: {
            'dist/concatenated.coffee': ['coffee-src/*.coffee', 'coffee-src/**/*.coffee']
          }
        }
      },
      concat: {
        options: {
          banner: banner
        },
        core: {
          files: {
            "dist/scaleApp.js": ["dist/scaleApp.js"]
          }
        },
        full: {
          files: {
            "dist/scaleApp.full.js": ["dist/scaleApp.full.js"]
          }
        }
      },
      coffee: {
        core: {
          options: {
            join: true
          },
          files: {
            "dist/scaleApp.js": ["coffee-src/base/Util.coffee", "coffee-src/base/Common.coffee", "coffee-src/base/Mediator.coffee", "coffee-src/base/Core.coffee", "coffee-src/base/scaleApp.coffee"]
          }
        },
        full: {
          options: {
            join: true
          },
          files: {
            "dist/scaleApp.full.js": ["coffee-src/base/Util.coffee", "coffee-src/base/Common.coffee", "coffee-src/base/Mediator.coffee", "coffee-src/base/Core.coffee", "coffee-src/base/scaleApp.coffee", "plugins/src/*.coffee"]
          }
        },
        plugins: {
          expand: true,
          flatten: true,
          cwd: 'plugins/src',
          src: ['*.coffee'],
          dest: 'dist/plugins/',
          rename: renameCoffe2js
        }
      },
      uglify: {
        options: {
          banner: banner,
          mangle: {
            toplevel: false
          },
          squeeze: {
            dead_code: true
          },
          codegen: {
            quote_keys: false
          }
        },
        core: {
          files: {
            'dist/scaleApp.min.js': ["dist/scaleApp.js"]
          }
        },
        full: {
          files: {
            'dist/scaleApp.full.min.js': ["dist/scaleApp.full.js"]
          }
        },
        plugins: {
          expand: true,
          flatten: true,
          cwd: 'dist/plugins/',
          src: ["*.js", "!*.min.js"],
          dest: 'dist/plugins/',
          rename: renameJs2min
        }
      },
      watch: {
        src: {
          files: ["coffee-src/*.coffee", "coffee-src/**/*.coffee"],
          tasks: ["coffee"]
        }
      },
      coffeelint: {
        core: ["coffee-src/*.coffee"],
        options: {
          no_trailing_whitespace: {
            level: "warn"
          }
        }
      }
    });
    grunt.loadNpmTasks("grunt-contrib-coffee");
    grunt.loadNpmTasks("grunt-contrib-watch");
    grunt.loadNpmTasks("grunt-contrib-uglify");
    grunt.loadNpmTasks("grunt-contrib-concat");
    grunt.loadNpmTasks("grunt-coffeescript-concat");
    grunt.loadNpmTasks("grunt-coffeelint");
    grunt.registerTask("default", ["coffee", "concat", "uglify"]);
    return grunt.registerTask("custom", "create a custom bundle", function() {
      var base, customBuild, e, i, min, plugins;
      if (this.args.length === 0) {
        return grunt.warn(this.name + ", no plugins specified");
      } else {
        base = grunt.file.read("./dist/scaleApp.js");
        plugins = "";
        i = 0;
        while (i < this.args.length) {
          try {
            plugins += "\n" + grunt.file.read("./dist/plugins/scaleApp." + this.args[i] + ".js");
          } catch (_error) {
            e = _error;
            console.log(e);
            grunt.warn("could not find \"" + this.args[i] + "\" plugin");
          }
          i++;
        }
        customBuild = base + "\n" + plugins;
        grunt.file.write("./dist/scaleApp.custom.js", customBuild);
        min = require("uglify-js").minify(customBuild, {
          fromString: true
        });
        return grunt.file.write("./dist/scaleApp.custom.min.js", min.code);
      }
    });
  };

}).call(this);

//# sourceMappingURL=Gruntfile.js.map
