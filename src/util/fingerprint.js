// Generated by CoffeeScript 1.8.0
(function() {
  var Fingerprint,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Fingerprint = (function(_super) {
    __extends(Fingerprint, _super);

    function Fingerprint(options) {
      var nativeForEach, nativeMap;
      nativeForEach = void 0;
      nativeMap = void 0;
      nativeForEach = Array.prototype.forEach;
      nativeMap = Array.prototype.map;
      this.each = function(obj, iterator, context) {
        var i, key, l;
        if (obj === null) {
          return;
        }
        if (nativeForEach && obj.forEach === nativeForEach) {
          obj.forEach(iterator, context);
        } else if (obj.length === +obj.length) {
          i = 0;
          l = obj.length;
          while (i < l) {
            if (iterator.call(context, obj[i], i, obj) === {}) {
              return;
            }
            i++;
          }
        } else {
          for (key in obj) {
            if (obj.hasOwnProperty(key)) {
              if (iterator.call(context, obj[key], key, obj) === {}) {
                return;
              }
            }
          }
        }
      };
      this.map = function(obj, iterator, context) {
        var results;
        results = [];
        if (obj == null) {
          return results;
        }
        if (nativeMap && obj.map === nativeMap) {
          return obj.map(iterator, context);
        }
        this.each(obj, function(value, index, list) {
          results[results.length] = iterator.call(context, value, index, list);
        });
        return results;
      };
      if (typeof options === "object") {
        this.hasher = options.hasher;
        this.screen_resolution = options.screen_resolution;
        this.canvas = options.canvas;
        this.ie_activex = options.ie_activex;
      } else {
        if (typeof options === "function") {
          this.hasher = options;
        }
      }
      return;
    }

    Fingerprint.prototype.get = function() {
      var keys, resolution;
      keys = [];
      keys.push(navigator.userAgent);
      keys.push(navigator.language);
      keys.push(screen.colorDepth);
      if (this.screen_resolution) {
        resolution = this.getScreenResolution();
        if (typeof resolution !== "undefined") {
          keys.push(this.getScreenResolution().join("x"));
        }
      }
      keys.push(new Date().getTimezoneOffset());
      keys.push(this.hasSessionStorage());
      keys.push(this.hasLocalStorage());
      keys.push(!!window.indexedDB);
      if (document.body) {
        keys.push(typeof document.body.addBehavior);
      } else {
        keys.push(typeof undefined);
      }
      keys.push(typeof window.openDatabase);
      keys.push(navigator.cpuClass);
      keys.push(navigator.platform);
      keys.push(navigator.doNotTrack);
      keys.push(this.getPluginsString());
      if (this.canvas && this.isCanvasSupported()) {
        keys.push(this.getCanvasFingerprint());
      }
      if (this.hasher) {
        return this.hasher(keys.join("###"), 31);
      } else {
        return this.murmurhash3_32_gc(keys.join("###"), 31);
      }
    };


    /**
    JS Implementation of MurmurHash3 (r136) (as of May 20, 2011)
    
    @author <a href="mailto:gary.court@gmail.com">Gary Court</a>
    @see http://github.com/garycourt/murmurhash-js
    @author <a href="mailto:aappleby@gmail.com">Austin Appleby</a>
    @see http://sites.google.com/site/murmurhash/
    
    @param {string} key ASCII only
    @param {number} seed Positive integer only
    @return {number} 32-bit positive integer hash
     */

    Fingerprint.prototype.murmurhash3_32_gc = function(key, seed) {
      var bytes, c1, c2, h1, h1b, i, k1, remainder;
      remainder = void 0;
      bytes = void 0;
      h1 = void 0;
      h1b = void 0;
      c1 = void 0;
      c2 = void 0;
      k1 = void 0;
      i = void 0;
      remainder = key.length & 3;
      bytes = key.length - remainder;
      h1 = seed;
      c1 = 0xcc9e2d51;
      c2 = 0x1b873593;
      i = 0;
      while (i < bytes) {
        k1 = (key.charCodeAt(i) & 0xff) | ((key.charCodeAt(++i) & 0xff) << 8) | ((key.charCodeAt(++i) & 0xff) << 16) | ((key.charCodeAt(++i) & 0xff) << 24);
        ++i;
        k1 = (((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;
        k1 = (k1 << 15) | (k1 >>> 17);
        k1 = (((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;
        h1 ^= k1;
        h1 = (h1 << 13) | (h1 >>> 19);
        h1b = (((h1 & 0xffff) * 5) + ((((h1 >>> 16) * 5) & 0xffff) << 16)) & 0xffffffff;
        h1 = ((h1b & 0xffff) + 0x6b64) + ((((h1b >>> 16) + 0xe654) & 0xffff) << 16);
      }
      k1 = 0;
      switch (remainder) {
        case 3:
          k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;
          break;
        case 2:
          k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;
          break;
        case 1:
          k1 ^= key.charCodeAt(i) & 0xff;
          k1 = (((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;
          k1 = (k1 << 15) | (k1 >>> 17);
          k1 = (((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;
          h1 ^= k1;
      }
      h1 ^= key.length;
      h1 ^= h1 >>> 16;
      h1 = (((h1 & 0xffff) * 0x85ebca6b) + ((((h1 >>> 16) * 0x85ebca6b) & 0xffff) << 16)) & 0xffffffff;
      h1 ^= h1 >>> 13;
      h1 = (((h1 & 0xffff) * 0xc2b2ae35) + ((((h1 >>> 16) * 0xc2b2ae35) & 0xffff) << 16)) & 0xffffffff;
      h1 ^= h1 >>> 16;
      return h1 >>> 0;
    };

    Fingerprint.prototype.hasLocalStorage = function() {
      var e;
      try {
        return !!window.localStorage;
      } catch (_error) {
        e = _error;
        return true;
      }
    };

    Fingerprint.prototype.hasSessionStorage = function() {
      var e;
      try {
        return !!window.sessionStorage;
      } catch (_error) {
        e = _error;
        return true;
      }
    };

    Fingerprint.prototype.isCanvasSupported = function() {
      var elem;
      elem = document.createElement("canvas");
      return !!(elem.getContext && elem.getContext("2d"));
    };

    Fingerprint.prototype.isIE = function() {
      if (navigator.appName === "Microsoft Internet Explorer") {
        return true;
      } else {
        if (navigator.appName === "Netscape" && /Trident/.test(navigator.userAgent)) {
          return true;
        }
      }
      return false;
    };

    Fingerprint.prototype.getPluginsString = function() {
      if (this.isIE() && this.ie_activex) {
        return this.getIEPluginsString();
      } else {
        return this.getRegularPluginsString();
      }
    };

    Fingerprint.prototype.getRegularPluginsString = function() {
      return this.map(navigator.plugins, function(p) {
        var mimeTypes;
        mimeTypes = this.map(p, function(mt) {
          return [mt.type, mt.suffixes].join("~");
        }).join(",");
        return [p.name, p.description, mimeTypes].join("::");
      }, this).join(";");
    };

    Fingerprint.prototype.getIEPluginsString = function() {
      var names;
      if (window.ActiveXObject) {
        names = ["ShockwaveFlash.ShockwaveFlash", "AcroPDF.PDF", "PDF.PdfCtrl", "QuickTime.QuickTime", "rmocx.RealPlayer G2 Control", "rmocx.RealPlayer G2 Control.1", "RealPlayer.RealPlayer(tm) ActiveX Control (32-bit)", "RealVideo.RealVideo(tm) ActiveX Control (32-bit)", "RealPlayer", "SWCtl.SWCtl", "WMPlayer.OCX", "AgControl.AgControl", "Skype.Detection"];
        return this.map(names, function(name) {
          var e;
          try {
            new ActiveXObject(name);
            return name;
          } catch (_error) {
            e = _error;
            return null;
          }
        }).join(";");
      } else {
        return "";
      }
    };

    Fingerprint.prototype.getScreenResolution = function() {
      return [screen.height, screen.width];
    };

    Fingerprint.prototype.getCanvasFingerprint = function() {
      var canvas, ctx, txt;
      canvas = document.createElement("canvas");
      ctx = canvas.getContext("2d");
      txt = "http://jdy.io";
      ctx.textBaseline = "top";
      ctx.font = "14px 'Arial'";
      ctx.textBaseline = "alphabetic";
      ctx.fillStyle = "#f60";
      ctx.fillRect(125, 1, 62, 20);
      ctx.fillStyle = "#069";
      ctx.fillText(txt, 2, 15);
      ctx.fillStyle = "rgba(102, 204, 0, 0.7)";
      ctx.fillText(txt, 4, 17);
      return canvas.toDataURL();
    };

    return Fingerprint;

  })(core.Mediator);

}).call(this);

//# sourceMappingURL=fingerprint.js.map
